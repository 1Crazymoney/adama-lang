/* The Adama Programming Language For Board Games!
 *    See http://www.adama-lang.org/ for more information.
 * (c) copyright 2020 Jeffrey M. Barber (http://jeffrey.io) */
package org.adamalang.translator;

import org.junit.Test;

public class GeneratedAnonymousTests extends GeneratedBase {
  private String cached_Legacy_1 = null;
  private String get_Legacy_1() {
    if (cached_Legacy_1 != null) {
      return cached_Legacy_1;
    }
    cached_Legacy_1 = generateTestOutput(true, "Legacy_1", "./test_code/Anonymous_Legacy_success.a");
    return cached_Legacy_1;
  }

  @Test
  public void testLegacyEmission() {
    assertEmissionGood(get_Legacy_1());
  }

  @Test
  public void testLegacySuccess() {
    assertLivePass(get_Legacy_1());
  }

  @Test
  public void testLegacyGoodWillHappy() {
    assertGoodWillHappy(get_Legacy_1());
  }

  @Test
  public void testLegacyExceptionFree() {
    assertExceptionFree(get_Legacy_1());
  }

  @Test
  public void testLegacyTODOFree() {
    assertTODOFree(get_Legacy_1());
  }

  @Test
  public void stable_Legacy_1() {
    String live = get_Legacy_1();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Anonymous_Legacy_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class Legacy_1 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxThing> things;");
    gold.append("\n  public Legacy_1(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    things = RxFactory.makeRxTable(__self, this, __root, \"things\", __BRIDGE_Thing);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    things.__commit(\"things\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    things.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxThing extends RxRecordBase<RTxThing> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxDouble z;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxThing(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      z = RxFactory.makeRxDouble(this, __node, \"z\", 0.0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"y\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, y.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.DOUBLE_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Thing\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxThing> __BRIDGE_Thing = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxThing construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxThing(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxThing[] makeArray(int __n) {");
    gold.append("\n      return new RTxThing[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int x, int y) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_1 implements NtMessageBase {");
    gold.append("\n    private int z;");
    gold.append("\n    private RTx_AnonObjConvert_1(ObjectNode payload) {");
    gold.append("\n      this.z = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"z\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"z\", z, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_1(int z) {");
    gold.append("\n      this.z = z;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_1> __BRIDGE__AnonObjConvert_1 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_1(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_1[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_2 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private int z;");
    gold.append("\n    private RTx_AnonObjConvert_2(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n      this.z = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"z\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"z\", z, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2(int x, int y, int z) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n      this.z = z;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_2> __BRIDGE__AnonObjConvert_2 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_2(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_2[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_3 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private double z;");
    gold.append("\n    private RTx_AnonObjConvert_3(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n      this.z = NativeBridge.DOUBLE_NATIVE_SUPPORT.readFromMessageObject(payload, \"z\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      NativeBridge.DOUBLE_NATIVE_SUPPORT.writeTo(\"z\", z, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_3(int x, int y, double z) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n      this.z = z;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_3> __BRIDGE__AnonObjConvert_3 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_3 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_3(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_3[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_3[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  private void __step_setup() {");
    gold.append("\n    __code_cost += 6;");
    gold.append("\n    __track(0);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxThing> _AutoRef5 = things;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr7 = new RTx_AnonObjConvert_0(1, 2);");
    gold.append("\n      RTxThing _CreateRef6 = _AutoRef5.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef6.x.set(_AutoExpr7.x);");
    gold.append("\n      _CreateRef6.y.set(_AutoExpr7.y);");
    gold.append("\n    }");
    gold.append("\n    __track(1);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxThing> _AutoRef8 = things;");
    gold.append("\n      for (RTx_AnonObjConvert_0 _AutoElement9 : new RTx_AnonObjConvert_0[] {new RTx_AnonObjConvert_0(2, 3)}) {");
    gold.append("\n        RTxThing _CreateRef9 = _AutoRef8.make();");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        _CreateRef9.x.set(_AutoElement9.x);");
    gold.append("\n        _CreateRef9.y.set(_AutoElement9.y);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxThing> _AutoRef10 = things;");
    gold.append("\n      for (RTx_AnonObjConvert_1 _AutoElement11 : new RTx_AnonObjConvert_1[] {new RTx_AnonObjConvert_1(4)}) {");
    gold.append("\n        RTxThing _CreateRef11 = _AutoRef10.make();");
    gold.append("\n        __code_cost += 1;");
    gold.append("\n        _CreateRef11.z.set(_AutoElement11.z);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxThing> _AutoRef12 = things;");
    gold.append("\n      for (RTx_AnonObjConvert_0 _AutoElement13 : new RTx_AnonObjConvert_0[] {new RTx_AnonObjConvert_0(3, 4), new RTx_AnonObjConvert_0(4, 5)}) {");
    gold.append("\n        RTxThing _CreateRef13 = _AutoRef12.make();");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        _CreateRef13.x.set(_AutoElement13.x);");
    gold.append("\n        _CreateRef13.y.set(_AutoElement13.y);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(4);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxThing> _AutoRef14 = things;");
    gold.append("\n      for (RTx_AnonObjConvert_3 _AutoElement15 : new RTx_AnonObjConvert_3[] {new RTx_AnonObjConvert_3(3, 4, 1), new RTx_AnonObjConvert_3(4, 5, 3.14)}) {");
    gold.append("\n        RTxThing _CreateRef15 = _AutoRef14.make();");
    gold.append("\n        __code_cost += 3;");
    gold.append("\n        _CreateRef15.x.set(_AutoElement15.x);");
    gold.append("\n        _CreateRef15.y.set(_AutoElement15.y);");
    gold.append("\n        _CreateRef15.z.set(_AutoElement15.z);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {");
    gold.append("\n    switch(__new_state) {");
    gold.append("\n      case \"setup\":");
    gold.append("\n        __step_setup();");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(5);");
    gold.append("\n    __transitionStateMachine(\"setup\", 0);");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__state\":\"setup\",\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__state\":\"\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\",\"things\":{\"auto_key\":7,\"rows\":{\"0\":{\"x\":1,\"y\":2},\"1\":{\"x\":2,\"y\":3},\"2\":{\"z\":4.0},\"3\":{\"x\":3,\"y\":4},\"4\":{\"x\":4,\"y\":5},\"5\":{\"x\":3,\"y\":4,\"z\":1.0},\"6\":{\"x\":4,\"y\":5,\"z\":3.14}}}} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":23,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"things\":{\"auto_key\":7,\"rows\":{\"0\":{\"x\":1,\"y\":2},\"1\":{\"x\":2,\"y\":3},\"2\":{\"z\":4.0},\"3\":{\"x\":3,\"y\":4},\"4\":{\"x\":4,\"y\":5},\"5\":{\"x\":3,\"y\":4,\"z\":1.0},\"6\":{\"x\":4,\"y\":5,\"z\":3.14}}},\"__goodwill_used\":0,\"__cost\":23,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_TypeConstruction_2 = null;
  private String get_TypeConstruction_2() {
    if (cached_TypeConstruction_2 != null) {
      return cached_TypeConstruction_2;
    }
    cached_TypeConstruction_2 = generateTestOutput(true, "TypeConstruction_2", "./test_code/Anonymous_TypeConstruction_success.a");
    return cached_TypeConstruction_2;
  }

  @Test
  public void testTypeConstructionEmission() {
    assertEmissionGood(get_TypeConstruction_2());
  }

  @Test
  public void testTypeConstructionSuccess() {
    assertLivePass(get_TypeConstruction_2());
  }

  @Test
  public void testTypeConstructionGoodWillHappy() {
    assertGoodWillHappy(get_TypeConstruction_2());
  }

  @Test
  public void testTypeConstructionExceptionFree() {
    assertExceptionFree(get_TypeConstruction_2());
  }

  @Test
  public void testTypeConstructionTODOFree() {
    assertTODOFree(get_TypeConstruction_2());
  }

  @Test
  public void stable_TypeConstruction_2() {
    String live = get_TypeConstruction_2();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Anonymous_TypeConstruction_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class TypeConstruction_2 extends LivingDocument {");
    gold.append("\n  public TypeConstruction_2(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_E = new int[] {0};");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int x) {");
    gold.append("\n      this.x = x;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_1 implements NtMessageBase {");
    gold.append("\n    private int y;");
    gold.append("\n    private RTx_AnonObjConvert_1(ObjectNode payload) {");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_1(int y) {");
    gold.append("\n      this.y = y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_1> __BRIDGE__AnonObjConvert_1 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_1(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_1[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTxAutoMaxRecord2 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private RTxAutoMaxRecord2(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTxAutoMaxRecord2(int x, int y) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTxAutoMaxRecord2> __BRIDGE_AutoMaxRecord2 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTxAutoMaxRecord2 convert(ObjectNode __node) {");
    gold.append("\n      return new RTxAutoMaxRecord2(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxAutoMaxRecord2[] makeArray(int __n) {");
    gold.append("\n      return new RTxAutoMaxRecord2[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_5 implements NtMessageBase {");
    gold.append("\n    private boolean b;");
    gold.append("\n    private double d;");
    gold.append("\n    private int e;");
    gold.append("\n    private String s;");
    gold.append("\n    private long u;");
    gold.append("\n    private int v;");
    gold.append("\n    private RTx_AnonObjConvert_5(ObjectNode payload) {");
    gold.append("\n      this.b = NativeBridge.BOOLEAN_NATIVE_SUPPORT.readFromMessageObject(payload, \"b\");");
    gold.append("\n      this.d = NativeBridge.DOUBLE_NATIVE_SUPPORT.readFromMessageObject(payload, \"d\");");
    gold.append("\n      this.e = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"e\");");
    gold.append("\n      this.s = NativeBridge.STRING_NATIVE_SUPPORT.readFromMessageObject(payload, \"s\");");
    gold.append("\n      this.u = NativeBridge.LONG_NATIVE_SUPPORT.readFromMessageObject(payload, \"u\");");
    gold.append("\n      this.v = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"v\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.BOOLEAN_NATIVE_SUPPORT.writeTo(\"b\", b, __node);");
    gold.append("\n      NativeBridge.DOUBLE_NATIVE_SUPPORT.writeTo(\"d\", d, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"e\", e, __node);");
    gold.append("\n      NativeBridge.STRING_NATIVE_SUPPORT.writeTo(\"s\", s, __node);");
    gold.append("\n      NativeBridge.LONG_NATIVE_SUPPORT.writeTo(\"u\", u, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"v\", v, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_5(boolean b, double d, int e, String s, long u, int v) {");
    gold.append("\n      this.b = b;");
    gold.append("\n      this.d = d;");
    gold.append("\n      this.e = e;");
    gold.append("\n      this.s = s;");
    gold.append("\n      this.u = u;");
    gold.append("\n      this.v = v;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_5> __BRIDGE__AnonObjConvert_5 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_5 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_5(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_5[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_5[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_6 implements NtMessageBase {");
    gold.append("\n    private RTx_AnonObjConvert_6(ObjectNode payload) {}");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_6() {}");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_6> __BRIDGE__AnonObjConvert_6 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_6 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_6(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_6[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_6[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 5;");
    gold.append("\n    __track(0);");
    gold.append("\n    RTxAutoMaxRecord2[] x = new RTxAutoMaxRecord2[] {new RTxAutoMaxRecord2(1, 0), (new RTxAutoMaxRecord2(0, 2))};");
    gold.append("\n    __track(1);");
    gold.append("\n    RTxAutoMaxRecord2[] y = new RTxAutoMaxRecord2[] {new RTxAutoMaxRecord2(1, 0), (false ? new RTxAutoMaxRecord2(0, 2) : new RTxAutoMaxRecord2(3, 0))};");
    gold.append("\n    __track(2);");
    gold.append("\n    RTxAutoMaxRecord2 z = new RTxAutoMaxRecord2(3, 4);");
    gold.append("\n    __track(3);");
    gold.append("\n    RTx_AnonObjConvert_5[] u = new RTx_AnonObjConvert_5[] {new RTx_AnonObjConvert_5(false, 42.0, 0, \"Hello World\", 123L, 42), new RTx_AnonObjConvert_5(false, 0.0, 0, \"\", 0L, 0)};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":5,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":5,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
}
