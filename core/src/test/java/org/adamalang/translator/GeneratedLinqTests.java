/* The Adama Programming Language For Board Games!
 *    See http://www.adama-lang.org/ for more information.
 * (c) copyright 2020 Jeffrey M. Barber (http://jeffrey.io) */
package org.adamalang.translator;

import org.junit.Test;

public class GeneratedLinqTests extends GeneratedBase {
  private String cached_ErrorsFindingTables_1 = null;
  private String get_ErrorsFindingTables_1() {
    if (cached_ErrorsFindingTables_1 != null) {
      return cached_ErrorsFindingTables_1;
    }
    cached_ErrorsFindingTables_1 = generateTestOutput(false, "ErrorsFindingTables_1", "./test_code/Linq_ErrorsFindingTables_failure.a");
    return cached_ErrorsFindingTables_1;
  }

  @Test
  public void testErrorsFindingTablesFailure() {
    assertLiveFail(get_ErrorsFindingTables_1());
  }

  @Test
  public void testErrorsFindingTablesExceptionFree() {
    assertExceptionFree(get_ErrorsFindingTables_1());
  }

  @Test
  public void testErrorsFindingTablesTODOFree() {
    assertTODOFree(get_ErrorsFindingTables_1());
  }

  @Test
  public void stable_ErrorsFindingTables_1() {
    String live = get_ErrorsFindingTables_1();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_ErrorsFindingTables_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 4,");
    gold.append("\n      \"character\" : 6");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 4,");
    gold.append("\n      \"character\" : 7");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type not found: the type 'Z' was not found.(TypeCheckReferences)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 12,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 12,");
    gold.append("\n      \"character\" : 12");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: must have a type of 'table<?>', but got a type of 'int'.(TypeCheckReferences)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 0,");
    gold.append("\n      \"character\" : 0");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 0,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: must have a type of 'table<?>', but got a type of 'X'.(TypeCheckReferences)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class ErrorsFindingTables_1 extends LivingDocument {");
    gold.append("\n  private final RTxX z;");
    gold.append("\n  private final RxTable<RTxZ> t;");
    gold.append("\n  private final RxTable<RTxK> k;");
    gold.append("\n  public ErrorsFindingTables_1(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    z = new RTxX(RxFactory.ensureChildNodeExists(__root, \"z\"), this);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_Z);");
    gold.append("\n    k = RxFactory.makeRxTable(__self, this, __root, \"k\", __BRIDGE_K);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    z.__commit(\"z\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    k.__commit(\"k\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    z.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    k.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTxK implements NtMessageBase {");
    gold.append("\n    private RTxK(ObjectNode payload) {}");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTxK() {}");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTxK> __BRIDGE_K = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTxK convert(ObjectNode __node) {");
    gold.append("\n      return new RTxK(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxK[] makeArray(int __n) {");
    gold.append("\n      return new RTxK[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 6;");
    gold.append("\n    __track(0);");
    gold.append("\n    int x = 0;");
    gold.append("\n    __track(1);");
    gold.append("\n");
    gold.append("\n    __track(2);");
    gold.append("\n    (z.iterate(true));");
    gold.append("\n    __track(3);");
    gold.append("\n    (t.iterate(true));");
    gold.append("\n    __track(4);");
    gold.append("\n    (k.iterate(true));");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_FieldNotFound_2 = null;
  private String get_FieldNotFound_2() {
    if (cached_FieldNotFound_2 != null) {
      return cached_FieldNotFound_2;
    }
    cached_FieldNotFound_2 = generateTestOutput(false, "FieldNotFound_2", "./test_code/Linq_FieldNotFound_failure.a");
    return cached_FieldNotFound_2;
  }

  @Test
  public void testFieldNotFoundFailure() {
    assertLiveFail(get_FieldNotFound_2());
  }

  @Test
  public void testFieldNotFoundExceptionFree() {
    assertExceptionFree(get_FieldNotFound_2());
  }

  @Test
  public void testFieldNotFoundTODOFree() {
    assertTODOFree(get_FieldNotFound_2());
  }

  @Test
  public void stable_FieldNotFound_2() {
    String live = get_FieldNotFound_2();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_FieldNotFound_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 7,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 7,");
    gold.append("\n      \"character\" : 23");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Record 'list<Y>' lacks field 'z'(FieldLookup)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 8,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 8,");
    gold.append("\n      \"character\" : 14");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Record 'Y' lacks field 'z'(FieldLookup)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class FieldNotFound_2 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxY> t;");
    gold.append("\n  private final RTxY y;");
    gold.append("\n  public FieldNotFound_2(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_Y);");
    gold.append("\n    y = new RTxY(RxFactory.ensureChildNodeExists(__root, \"y\"), this);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    y.__commit(\"y\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    y.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxY extends RxRecordBase<RTxY> {");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxY(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Y\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxY> __BRIDGE_Y = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxY construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxY(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxY[] makeArray(int __n) {");
    gold.append("\n      return new RTxY[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  public void __test_PrimaryTest(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"PrimaryTest\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      __track(0);");
    gold.append("\n");
    gold.append("\n      __track(1);");
    gold.append("\n");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {\"PrimaryTest\"};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {");
    gold.append("\n    switch(testName) {");
    gold.append("\n      case \"PrimaryTest\":");
    gold.append("\n          __test_PrimaryTest(report);");
    gold.append("\n          return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {}");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_IndexingCant_3 = null;
  private String get_IndexingCant_3() {
    if (cached_IndexingCant_3 != null) {
      return cached_IndexingCant_3;
    }
    cached_IndexingCant_3 = generateTestOutput(false, "IndexingCant_3", "./test_code/Linq_IndexingCant_failure.a");
    return cached_IndexingCant_3;
  }

  @Test
  public void testIndexingCantFailure() {
    assertLiveFail(get_IndexingCant_3());
  }

  @Test
  public void testIndexingCantExceptionFree() {
    assertExceptionFree(get_IndexingCant_3());
  }

  @Test
  public void testIndexingCantTODOFree() {
    assertTODOFree(get_IndexingCant_3());
  }

  @Test
  public void stable_IndexingCant_3() {
    String live = get_IndexingCant_3();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_IndexingCant_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 9");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 10");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type not found: the type 'E' was not found.(TypeCheckReferences)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 2");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 13");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Variable 'y' has no backing type(EnvironmentDefine)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2147483647,");
    gold.append("\n      \"character\" : 2147483647");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 0,");
    gold.append("\n      \"character\" : 0");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Index could not find field 'nofound'(StructureDefine)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2147483647,");
    gold.append("\n      \"character\" : 2147483647");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 0,");
    gold.append("\n      \"character\" : 0");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Index for field 'z' is not possible due to type(StructureDefine)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2147483647,");
    gold.append("\n      \"character\" : 2147483647");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 0,");
    gold.append("\n      \"character\" : 0");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Index was already defined: 'x'(StructureDefine)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class IndexingCant_3 extends LivingDocument {");
    gold.append("\n  public IndexingCant_3(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  private class RTxOne extends RxRecordBase<RTxOne> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxString z;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_nofound;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_z;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_x;");
    gold.append("\n    private RTxOne(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      z = RxFactory.makeRxString(this, __node, \"z\", \"\");");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        __INDEX_nofound = new ReactiveIndexInvalidator(((RxTable<RTxOne>)(__owner)).getIndex((short)0), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return nofound.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        nofound.__subscribe(__INDEX_nofound);");
    gold.append("\n        __INDEX_z = new ReactiveIndexInvalidator(((RxTable<RTxOne>)(__owner)).getIndex((short)1), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return z.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        z.__subscribe(__INDEX_z);");
    gold.append("\n        __INDEX_x = new ReactiveIndexInvalidator(((RxTable<RTxOne>)(__owner)).getIndex((short)2), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return x.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        x.__subscribe(__INDEX_x);");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        __INDEX_nofound = null;");
    gold.append("\n        __INDEX_z = null;");
    gold.append("\n        __INDEX_x = null;");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.STRING_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"One\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      __INDEX_nofound.deindex();");
    gold.append("\n      __INDEX_z.deindex();");
    gold.append("\n      __INDEX_x.deindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      __INDEX_nofound.reindex();");
    gold.append("\n      __INDEX_z.reindex();");
    gold.append("\n      __INDEX_x.reindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxOne> __BRIDGE_One = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 3;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxOne construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxOne(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxOne[] makeArray(int __n) {");
    gold.append("\n      return new RTxOne[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {}");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_Indexing_4 = null;
  private String get_Indexing_4() {
    if (cached_Indexing_4 != null) {
      return cached_Indexing_4;
    }
    cached_Indexing_4 = generateTestOutput(true, "Indexing_4", "./test_code/Linq_Indexing_success.a");
    return cached_Indexing_4;
  }

  @Test
  public void testIndexingEmission() {
    assertEmissionGood(get_Indexing_4());
  }

  @Test
  public void testIndexingSuccess() {
    assertLivePass(get_Indexing_4());
  }

  @Test
  public void testIndexingGoodWillHappy() {
    assertGoodWillHappy(get_Indexing_4());
  }

  @Test
  public void testIndexingExceptionFree() {
    assertExceptionFree(get_Indexing_4());
  }

  @Test
  public void testIndexingTODOFree() {
    assertTODOFree(get_Indexing_4());
  }

  @Test
  public void stable_Indexing_4() {
    String live = get_Indexing_4();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_Indexing_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class Indexing_4 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxIssues> itbl;");
    gold.append("\n  public Indexing_4(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    itbl = RxFactory.makeRxTable(__self, this, __root, \"itbl\", __BRIDGE_Issues);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    itbl.__commit(\"itbl\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    itbl.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_E = new int[] {0, 1};");
    gold.append("\n  private class RTxOne extends RxRecordBase<RTxOne> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxClient z;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_x;");
    gold.append("\n    private RTxOne(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      z = RxFactory.makeRxClient(this, __node, \"z\", NtClient.NO_ONE);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        __INDEX_x = new ReactiveIndexInvalidator(((RxTable<RTxOne>)(__owner)).getIndex((short)0), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return x.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        x.__subscribe(__INDEX_x);");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        __INDEX_x = null;");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"y\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, y.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.CLIENT_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\", \"z\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue(), z.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"One\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      __INDEX_x.deindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      __INDEX_x.reindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxOne> __BRIDGE_One = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 1;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxOne construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxOne(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxOne[] makeArray(int __n) {");
    gold.append("\n      return new RTxOne[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private class RTxTwo extends RxRecordBase<RTxTwo> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxClient z;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_y;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_x;");
    gold.append("\n    private RTxTwo(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      z = RxFactory.makeRxClient(this, __node, \"z\", NtClient.NO_ONE);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        __INDEX_y = new ReactiveIndexInvalidator(((RxTable<RTxTwo>)(__owner)).getIndex((short)0), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return y.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        y.__subscribe(__INDEX_y);");
    gold.append("\n        __INDEX_x = new ReactiveIndexInvalidator(((RxTable<RTxTwo>)(__owner)).getIndex((short)1), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return x.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        x.__subscribe(__INDEX_x);");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        __INDEX_y = null;");
    gold.append("\n        __INDEX_x = null;");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"y\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, y.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.CLIENT_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\", \"z\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue(), z.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Two\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      __INDEX_y.deindex();");
    gold.append("\n      __INDEX_x.deindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      __INDEX_y.reindex();");
    gold.append("\n      __INDEX_x.reindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxTwo> __BRIDGE_Two = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 2;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxTwo construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxTwo(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxTwo[] makeArray(int __n) {");
    gold.append("\n      return new RTxTwo[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private class RTxIssues extends RxRecordBase<RTxIssues> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxInt32 z;");
    gold.append("\n    private final RxInt32 u;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_z;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_u;");
    gold.append("\n    private RTxIssues(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      z = RxFactory.makeRxInt32(this, __node, \"z\", 0);");
    gold.append("\n      u = RxFactory.makeRxInt32(this, __node, \"u\", 0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        __INDEX_z = new ReactiveIndexInvalidator(((RxTable<RTxIssues>)(__owner)).getIndex((short)0), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return z.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        z.__subscribe(__INDEX_z);");
    gold.append("\n        __INDEX_u = new ReactiveIndexInvalidator(((RxTable<RTxIssues>)(__owner)).getIndex((short)1), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return u.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        u.__subscribe(__INDEX_u);");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        __INDEX_z = null;");
    gold.append("\n        __INDEX_u = null;");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"u\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, u.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"y\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, y.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"u\", \"x\", \"y\", \"z\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {u.getIndexValue(), x.getIndexValue(), y.getIndexValue(), z.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        u.__commit(\"u\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        u.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Issues\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      __INDEX_z.deindex();");
    gold.append("\n      __INDEX_u.deindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      __INDEX_z.reindex();");
    gold.append("\n      __INDEX_u.reindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxIssues> __BRIDGE_Issues = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 2;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxIssues construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxIssues(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxIssues[] makeArray(int __n) {");
    gold.append("\n      return new RTxIssues[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private class RTxThree extends RxRecordBase<RTxThree> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxClient z;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_z;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_y;");
    gold.append("\n    private final ReactiveIndexInvalidator __INDEX_x;");
    gold.append("\n    private RTxThree(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      z = RxFactory.makeRxClient(this, __node, \"z\", NtClient.NO_ONE);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        __INDEX_z = new ReactiveIndexInvalidator(((RxTable<RTxThree>)(__owner)).getIndex((short)0), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return z.get().hashCode();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        z.__subscribe(__INDEX_z);");
    gold.append("\n        __INDEX_y = new ReactiveIndexInvalidator(((RxTable<RTxThree>)(__owner)).getIndex((short)1), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return y.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        y.__subscribe(__INDEX_y);");
    gold.append("\n        __INDEX_x = new ReactiveIndexInvalidator(((RxTable<RTxThree>)(__owner)).getIndex((short)2), this) {");
    gold.append("\n            @Override");
    gold.append("\n            public int pullValue() {");
    gold.append("\n                return x.get();");
    gold.append("\n            }");
    gold.append("\n          };");
    gold.append("\n        x.__subscribe(__INDEX_x);");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        __INDEX_z = null;");
    gold.append("\n        __INDEX_y = null;");
    gold.append("\n        __INDEX_x = null;");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"x\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, x.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"y\", NativeBridge.INTEGER_NATIVE_SUPPORT.toPrivateJsonNode(__who, y.get()));");
    gold.append("\n      __code_cost++;");
    gold.append("\n      __view.set(\"z\", NativeBridge.CLIENT_NATIVE_SUPPORT.toPrivateJsonNode(__who, z.get()));");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\", \"z\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue(), z.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Three\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      __INDEX_z.deindex();");
    gold.append("\n      __INDEX_y.deindex();");
    gold.append("\n      __INDEX_x.deindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      __INDEX_z.reindex();");
    gold.append("\n      __INDEX_y.reindex();");
    gold.append("\n      __INDEX_x.reindex();");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxThree> __BRIDGE_Three = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 3;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxThree construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxThree(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxThree[] makeArray(int __n) {");
    gold.append("\n      return new RTxThree[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  private void __step_code() {");
    gold.append("\n    __code_cost += 4;");
    gold.append("\n    __track(0);");
    gold.append("\n    (itbl.iterate(false)).where(true, new __CLOSURE_WhereClause0());");
    gold.append("\n    __track(1);");
    gold.append("\n    (itbl.iterate(false)).where(true, new __CLOSURE_WhereClause1());");
    gold.append("\n    __track(2);");
    gold.append("\n    (itbl.iterate(false)).where(true, new __CLOSURE_WhereClause2());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {");
    gold.append("\n    switch(__new_state) {");
    gold.append("\n      case \"code\":");
    gold.append("\n        __step_code();");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {}");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxIssues> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxIssues __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      int y = __obj.y.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause1 implements WhereClause<RTxIssues> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {3, 123};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.intersect(0, 123);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxIssues __obj) {");
    gold.append("\n      int z = __obj.z.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return z == 123;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause2 implements WhereClause<RTxIssues> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 13, 3, 42};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.intersect(0, 42);");
    gold.append("\n      __set.intersect(1, 13);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxIssues __obj) {");
    gold.append("\n      int z = __obj.z.get();");
    gold.append("\n      int u = __obj.u.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return z == 42 && u == 13;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":0,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":0,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_IterateNonTable_5 = null;
  private String get_IterateNonTable_5() {
    if (cached_IterateNonTable_5 != null) {
      return cached_IterateNonTable_5;
    }
    cached_IterateNonTable_5 = generateTestOutput(false, "IterateNonTable_5", "./test_code/Linq_IterateNonTable_failure.a");
    return cached_IterateNonTable_5;
  }

  @Test
  public void testIterateNonTableFailure() {
    assertLiveFail(get_IterateNonTable_5());
  }

  @Test
  public void testIterateNonTableExceptionFree() {
    assertExceptionFree(get_IterateNonTable_5());
  }

  @Test
  public void testIterateNonTableTODOFree() {
    assertTODOFree(get_IterateNonTable_5());
  }

  @Test
  public void stable_IterateNonTable_5() {
    String live = get_IterateNonTable_5();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_IterateNonTable_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 12");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: must have a type of 'table<?>', but got a type of 'int'.(TypeCheckReferences)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class IterateNonTable_5 extends LivingDocument {");
    gold.append("\n  public IterateNonTable_5(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(0);");
    gold.append("\n");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_LegacyShuffle_6 = null;
  private String get_LegacyShuffle_6() {
    if (cached_LegacyShuffle_6 != null) {
      return cached_LegacyShuffle_6;
    }
    cached_LegacyShuffle_6 = generateTestOutput(true, "LegacyShuffle_6", "./test_code/Linq_LegacyShuffle_success.a");
    return cached_LegacyShuffle_6;
  }

  @Test
  public void testLegacyShuffleEmission() {
    assertEmissionGood(get_LegacyShuffle_6());
  }

  @Test
  public void testLegacyShuffleSuccess() {
    assertLivePass(get_LegacyShuffle_6());
  }

  @Test
  public void testLegacyShuffleGoodWillHappy() {
    assertGoodWillHappy(get_LegacyShuffle_6());
  }

  @Test
  public void testLegacyShuffleExceptionFree() {
    assertExceptionFree(get_LegacyShuffle_6());
  }

  @Test
  public void testLegacyShuffleTODOFree() {
    assertTODOFree(get_LegacyShuffle_6());
  }

  @Test
  public void stable_LegacyShuffle_6() {
    String live = get_LegacyShuffle_6();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_LegacyShuffle_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class LegacyShuffle_6 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> tbl;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_1;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_2;");
    gold.append("\n  public LegacyShuffle_6(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    tbl = RxFactory.makeRxTable(__self, this, __root, \"tbl\", __BRIDGE_X);");
    gold.append("\n    list_1 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).shuffle(true, __random)));");
    gold.append("\n    tbl.__subscribe(list_1);");
    gold.append("\n    list_2 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).shuffle(true, __random)));");
    gold.append("\n    tbl.__subscribe(list_2);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    tbl.__commit(\"tbl\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    tbl.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    __code_cost++;");
    gold.append("\n    __view.set(\"list_1\", NativeBridge.WRAP_LIST(__BRIDGE_X).toPrivateJsonNode(__who, list_1.get()));");
    gold.append("\n    __code_cost++;");
    gold.append("\n    __view.set(\"list_2\", NativeBridge.WRAP_LIST(__BRIDGE_X).toPrivateJsonNode(__who, list_2.get()));");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int x, int y) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  public boolean __onConnected__0(NtClient who){");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(0);");
    gold.append("\n    return (who.equals(NtClient.NO_ONE));");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    if (__onConnected__0(__cvalue)) __result = true;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 4;");
    gold.append("\n    __track(1);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef1 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr3 = new RTx_AnonObjConvert_0(1, 3);");
    gold.append("\n      RTxX _CreateRef2 = _AutoRef1.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef2.x.set(_AutoExpr3.x);");
    gold.append("\n      _CreateRef2.y.set(_AutoExpr3.y);");
    gold.append("\n    }");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef4 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr6 = new RTx_AnonObjConvert_0(2, 2);");
    gold.append("\n      RTxX _CreateRef5 = _AutoRef4.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef5.x.set(_AutoExpr6.x);");
    gold.append("\n      _CreateRef5.y.set(_AutoExpr6.y);");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef7 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr9 = new RTx_AnonObjConvert_0(3, 1);");
    gold.append("\n      RTxX _CreateRef8 = _AutoRef7.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef8.x.set(_AutoExpr9.x);");
    gold.append("\n      _CreateRef8.y.set(_AutoExpr9.y);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"tbl\":{\"auto_key\":3,\"rows\":{\"0\":{\"x\":1,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":3,\"y\":1}}},\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":10,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"tbl\":{\"auto_key\":3,\"rows\":{\"0\":{\"x\":1,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":3,\"y\":1}}},\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":10,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\n{\"command\":\"connect\",\"timestamp\":\"75\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"}}-->{\"__seq\":2,\"__connection_id\":1,\"__time\":\"75\",\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"}}} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seedUsed\":\"-4962768465676381896\",\"__seq\":3,\"__entropy\":\"4804307197456638271\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\nAS NO_ONE:{\"data\":{\"list_1\":[{},{},{}],\"list_2\":[{},{},{}]},\"outstanding\":[],\"blockers\":[]}");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_Legacy_7 = null;
  private String get_Legacy_7() {
    if (cached_Legacy_7 != null) {
      return cached_Legacy_7;
    }
    cached_Legacy_7 = generateTestOutput(true, "Legacy_7", "./test_code/Linq_Legacy_success.a");
    return cached_Legacy_7;
  }

  @Test
  public void testLegacyEmission() {
    assertEmissionGood(get_Legacy_7());
  }

  @Test
  public void testLegacySuccess() {
    assertLivePass(get_Legacy_7());
  }

  @Test
  public void testLegacyGoodWillHappy() {
    assertGoodWillHappy(get_Legacy_7());
  }

  @Test
  public void testLegacyExceptionFree() {
    assertExceptionFree(get_Legacy_7());
  }

  @Test
  public void testLegacyTODOFree() {
    assertTODOFree(get_Legacy_7());
  }

  @Test
  public void stable_Legacy_7() {
    String live = get_Legacy_7();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_Legacy_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class Legacy_7 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxZ> z0;");
    gold.append("\n  private final RTxZ z1;");
    gold.append("\n  private final RxTable<RTxX> tbl;");
    gold.append("\n  private final RxInt32 count1;");
    gold.append("\n  private final RxInt32 count2;");
    gold.append("\n  private final RxInt32 count3;");
    gold.append("\n  private final RxTable<RTxX> tbl2;");
    gold.append("\n  private final RxTable<RTxX> tbl3;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w2;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w3;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w4;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w5;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w6;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w7;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> list_w8;");
    gold.append("\n  private final RxInt32 count_tbl2;");
    gold.append("\n  public Legacy_7(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    z0 = RxFactory.makeRxTable(__self, this, __root, \"z0\", __BRIDGE_Z);");
    gold.append("\n    z1 = new RTxZ(RxFactory.ensureChildNodeExists(__root, \"z1\"), this);");
    gold.append("\n    tbl = RxFactory.makeRxTable(__self, this, __root, \"tbl\", __BRIDGE_X);");
    gold.append("\n    count1 = RxFactory.makeRxInt32(this, __root, \"count1\", 0);");
    gold.append("\n    count2 = RxFactory.makeRxInt32(this, __root, \"count2\", 0);");
    gold.append("\n    count3 = RxFactory.makeRxInt32(this, __root, \"count3\", 0);");
    gold.append("\n    tbl2 = RxFactory.makeRxTable(__self, this, __root, \"tbl2\", __BRIDGE_X);");
    gold.append("\n    tbl3 = RxFactory.makeRxTable(__self, this, __root, \"tbl3\", __BRIDGE_X);");
    gold.append("\n    list_w = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).where(true, new __CLOSURE_WhereClause0())));");
    gold.append("\n    tbl2.__subscribe(list_w);");
    gold.append("\n    list_w2 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).where(false, new __CLOSURE_WhereClause1()).orderBy(true, __ORDER_X_x_d)));");
    gold.append("\n    tbl2.__subscribe(list_w2);");
    gold.append("\n    list_w3 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).where(false, new __CLOSURE_WhereClause2()).orderBy(true, __ORDER_X_x_a)));");
    gold.append("\n    tbl2.__subscribe(list_w3);");
    gold.append("\n    list_w4 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).orderBy(true, __ORDER_X_y_a_x_a)));");
    gold.append("\n    tbl2.__subscribe(list_w4);");
    gold.append("\n    list_w5 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).orderBy(true, __ORDER_X_x_d_y_d)));");
    gold.append("\n    tbl2.__subscribe(list_w5);");
    gold.append("\n    list_w6 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).orderBy(true, __ORDER_X_x_a_y_a)));");
    gold.append("\n    tbl2.__subscribe(list_w6);");
    gold.append("\n    list_w7 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).orderBy(false, __ORDER_X_x_a_y_a).skipAndLimit(true, 0, 1)));");
    gold.append("\n    tbl2.__subscribe(list_w7);");
    gold.append("\n    list_w8 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl2.iterate(false).orderBy(false, __ORDER_X_x_a_y_a).skipAndLimit(true, 1, 1)));");
    gold.append("\n    tbl2.__subscribe(list_w8);");
    gold.append("\n    count_tbl2 = RxFactory.makeRxInt32(this, __root, \"count_tbl2\", 0);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    z0.__commit(\"z0\", __child);");
    gold.append("\n    z1.__commit(\"z1\", __child);");
    gold.append("\n    tbl.__commit(\"tbl\", __child);");
    gold.append("\n    count1.__commit(\"count1\", __child);");
    gold.append("\n    count2.__commit(\"count2\", __child);");
    gold.append("\n    count3.__commit(\"count3\", __child);");
    gold.append("\n    tbl2.__commit(\"tbl2\", __child);");
    gold.append("\n    tbl3.__commit(\"tbl3\", __child);");
    gold.append("\n    count_tbl2.__commit(\"count_tbl2\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    z0.__revert();");
    gold.append("\n    z1.__revert();");
    gold.append("\n    tbl.__revert();");
    gold.append("\n    count1.__revert();");
    gold.append("\n    count2.__revert();");
    gold.append("\n    count3.__revert();");
    gold.append("\n    tbl2.__revert();");
    gold.append("\n    tbl3.__revert();");
    gold.append("\n    count_tbl2.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 y;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      y = RxFactory.makeRxInt32(this, __node, \"y\", 0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\", \"y\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue(), y.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        y.__commit(\"y\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        y.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private class RTxZ extends RxRecordBase<RTxZ> {");
    gold.append("\n    private final RxTable<RTxX> tbl;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxZ(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      tbl = RxFactory.makeRxTable(__self, this, __node, \"tbl\", __BRIDGE_X);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        tbl.__commit(\"tbl\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        tbl.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Z\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxZ> __BRIDGE_Z = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxZ construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxZ(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxZ[] makeArray(int __n) {");
    gold.append("\n      return new RTxZ[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private int y;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n      this.y = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"y\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"y\", y, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int x, int y) {");
    gold.append("\n      this.x = x;");
    gold.append("\n      this.y = y;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 17;");
    gold.append("\n    __track(0);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef1 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr3 = new RTx_AnonObjConvert_0(1, 3);");
    gold.append("\n      RTxX _CreateRef2 = _AutoRef1.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef2.x.set(_AutoExpr3.x);");
    gold.append("\n      _CreateRef2.y.set(_AutoExpr3.y);");
    gold.append("\n    }");
    gold.append("\n    __track(1);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef4 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr6 = new RTx_AnonObjConvert_0(2, 2);");
    gold.append("\n      RTxX _CreateRef5 = _AutoRef4.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef5.x.set(_AutoExpr6.x);");
    gold.append("\n      _CreateRef5.y.set(_AutoExpr6.y);");
    gold.append("\n    }");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef7 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr9 = new RTx_AnonObjConvert_0(3, 1);");
    gold.append("\n      RTxX _CreateRef8 = _AutoRef7.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef8.x.set(_AutoExpr9.x);");
    gold.append("\n      _CreateRef8.y.set(_AutoExpr9.y);");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    count1.set((tbl.iterate(true)).size());");
    gold.append("\n    __track(4);");
    gold.append("\n    count2.set((tbl.iterate(false).where(true, new __CLOSURE_WhereClause3())).size());");
    gold.append("\n    __track(5);");
    gold.append("\n    count3.set((tbl.iterate(false).where(true, new __CLOSURE_WhereClause4())).size());");
    gold.append("\n    __track(6);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef10 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr12 = new RTx_AnonObjConvert_0(100, 3);");
    gold.append("\n      RTxX _CreateRef11 = _AutoRef10.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef11.x.set(_AutoExpr12.x);");
    gold.append("\n      _CreateRef11.y.set(_AutoExpr12.y);");
    gold.append("\n    }");
    gold.append("\n    __track(7);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef13 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr15 = new RTx_AnonObjConvert_0(2, 2);");
    gold.append("\n      RTxX _CreateRef14 = _AutoRef13.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef14.x.set(_AutoExpr15.x);");
    gold.append("\n      _CreateRef14.y.set(_AutoExpr15.y);");
    gold.append("\n    }");
    gold.append("\n    __track(8);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef16 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr18 = new RTx_AnonObjConvert_0(2, 2);");
    gold.append("\n      RTxX _CreateRef17 = _AutoRef16.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef17.x.set(_AutoExpr18.x);");
    gold.append("\n      _CreateRef17.y.set(_AutoExpr18.y);");
    gold.append("\n    }");
    gold.append("\n    __track(9);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef19 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr21 = new RTx_AnonObjConvert_0(100, 1);");
    gold.append("\n      RTxX _CreateRef20 = _AutoRef19.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef20.x.set(_AutoExpr21.x);");
    gold.append("\n      _CreateRef20.y.set(_AutoExpr21.y);");
    gold.append("\n    }");
    gold.append("\n    __track(10);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef22 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr24 = new RTx_AnonObjConvert_0(4, 2);");
    gold.append("\n      RTxX _CreateRef23 = _AutoRef22.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef23.x.set(_AutoExpr24.x);");
    gold.append("\n      _CreateRef23.y.set(_AutoExpr24.y);");
    gold.append("\n    }");
    gold.append("\n    __track(11);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef25 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr27 = new RTx_AnonObjConvert_0(5, 2);");
    gold.append("\n      RTxX _CreateRef26 = _AutoRef25.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef26.x.set(_AutoExpr27.x);");
    gold.append("\n      _CreateRef26.y.set(_AutoExpr27.y);");
    gold.append("\n    }");
    gold.append("\n    __track(12);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef28 = tbl2;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr30 = new RTx_AnonObjConvert_0(1, 2);");
    gold.append("\n      RTxX _CreateRef29 = _AutoRef28.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef29.x.set(_AutoExpr30.x);");
    gold.append("\n      _CreateRef29.y.set(_AutoExpr30.y);");
    gold.append("\n    }");
    gold.append("\n    __track(13);");
    gold.append("\n    count_tbl2.set(tbl2.size());");
    gold.append("\n    __track(14);");
    gold.append("\n    NtMaybe<RTxX> _AutoConditionvvv_31;");
    gold.append("\n    if ((_AutoConditionvvv_31 = (tbl2.iterate(false).where(true, new __CLOSURE_WhereClause5())).lookup(0)).has()) {");
    gold.append("\n      RTxX vvv = _AutoConditionvvv_31.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(15);");
    gold.append("\n      vvv.__delete();");
    gold.append("\n    }");
    gold.append("\n    __track(16);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef32 = tbl3;");
    gold.append("\n      for (RTxX _AutoElement33 : (tbl2.iterate(true)).toArray()) {");
    gold.append("\n        RTxX _CreateRef33 = _AutoRef32.make();");
    gold.append("\n        __code_cost += 3;");
    gold.append("\n        _CreateRef33.id.set(_AutoElement33.id.get());");
    gold.append("\n        _CreateRef33.x.set(_AutoElement33.x.get());");
    gold.append("\n        _CreateRef33.y.set(_AutoElement33.y.get());");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {1, 2};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int y = __obj.y.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return y == 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause1 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {1, 2};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int y = __obj.y.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return y == 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause2 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {1, 2};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int y = __obj.y.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return y == 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause3 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 1};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause4 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x <= 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause5 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 5};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == 5;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_x_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.x.compareTo(__b.x);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_x_a_y_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      int result = __a.x.compareTo(__b.x);");
    gold.append("\n      if (result != 0) return result;");
    gold.append("\n      return __a.y.compareTo(__b.y);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_x_d = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return -__a.x.compareTo(__b.x);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_x_d_y_d = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      int result = -__a.x.compareTo(__b.x);");
    gold.append("\n      if (result != 0) return result;");
    gold.append("\n      return -__a.y.compareTo(__b.y);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_y_a_x_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      int result = __a.y.compareTo(__b.y);");
    gold.append("\n      if (result != 0) return result;");
    gold.append("\n      return __a.x.compareTo(__b.x);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"tbl\":{\"auto_key\":3,\"rows\":{\"0\":{\"x\":1,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":3,\"y\":1}}},\"count1\":3,\"count2\":1,\"count3\":2,\"tbl2\":{\"auto_key\":7,\"rows\":{\"0\":{\"x\":100,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":2,\"y\":2},\"3\":{\"x\":100,\"y\":1},\"4\":{\"x\":4,\"y\":2},\"6\":{\"x\":1,\"y\":2}}},\"tbl3\":{\"auto_key\":6,\"rows\":{\"0\":{\"x\":100,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":2,\"y\":2},\"3\":{\"x\":100,\"y\":1},\"4\":{\"x\":4,\"y\":2},\"5\":{\"x\":1,\"y\":2,\"id\":6}}},\"count_tbl2\":7,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":70,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"tbl\":{\"auto_key\":3,\"rows\":{\"0\":{\"x\":1,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":3,\"y\":1}}},\"count1\":3,\"count2\":1,\"count3\":2,\"tbl2\":{\"auto_key\":7,\"rows\":{\"0\":{\"x\":100,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":2,\"y\":2},\"3\":{\"x\":100,\"y\":1},\"4\":{\"x\":4,\"y\":2},\"6\":{\"x\":1,\"y\":2}}},\"tbl3\":{\"auto_key\":6,\"rows\":{\"0\":{\"x\":100,\"y\":3},\"1\":{\"x\":2,\"y\":2},\"2\":{\"x\":2,\"y\":2},\"3\":{\"x\":100,\"y\":1},\"4\":{\"x\":4,\"y\":2},\"5\":{\"x\":1,\"y\":2,\"id\":6}}},\"count_tbl2\":7,\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":70,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_NonOrderable_8 = null;
  private String get_NonOrderable_8() {
    if (cached_NonOrderable_8 != null) {
      return cached_NonOrderable_8;
    }
    cached_NonOrderable_8 = generateTestOutput(false, "NonOrderable_8", "./test_code/Linq_NonOrderable_failure.a");
    return cached_NonOrderable_8;
  }

  @Test
  public void testNonOrderableFailure() {
    assertLiveFail(get_NonOrderable_8());
  }

  @Test
  public void testNonOrderableExceptionFree() {
    assertExceptionFree(get_NonOrderable_8());
  }

  @Test
  public void testNonOrderableTODOFree() {
    assertTODOFree(get_NonOrderable_8());
  }

  @Test
  public void stable_NonOrderable_8() {
    String live = get_NonOrderable_8();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_NonOrderable_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 10,");
    gold.append("\n      \"character\" : 30");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 10,");
    gold.append("\n      \"character\" : 31");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Typing issue: the structure 'Y' has field 'x' but it is not orderable..(RuleSetStructures)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 11,");
    gold.append("\n      \"character\" : 30");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 11,");
    gold.append("\n      \"character\" : 31");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Field not found: the structure 'Y' does not contain the field 'z'.(RuleSetStructures)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class NonOrderable_8 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxY> t;");
    gold.append("\n  public NonOrderable_8(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_Y);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private class RTxY extends RxRecordBase<RTxY> {");
    gold.append("\n    private final RTxX x;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxY(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = new RTxX(RxFactory.ensureChildNodeExists(__node, \"x\"), this);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Y\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxY> __BRIDGE_Y = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxY construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxY(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxY[] makeArray(int __n) {");
    gold.append("\n      return new RTxY[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  public void __test_PrimaryTest(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"PrimaryTest\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      __track(0);");
    gold.append("\n      NtList<RTxY> z1 = (t.iterate(false).orderBy(true, __ORDER_Y_x_a));");
    gold.append("\n      __track(1);");
    gold.append("\n      NtList<RTxY> z2 = (t.iterate(false).orderBy(true, __ORDER_Y_z_a));");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {\"PrimaryTest\"};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {");
    gold.append("\n    switch(testName) {");
    gold.append("\n      case \"PrimaryTest\":");
    gold.append("\n          __test_PrimaryTest(report);");
    gold.append("\n          return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {}");
    gold.append("\n  private final static Comparator<RTxY> __ORDER_Y_x_a = new Comparator<RTxY>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxY __a, RTxY __b) {");
    gold.append("\n      return __a.x.compareTo(__b.x);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxY> __ORDER_Y_z_a = new Comparator<RTxY>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxY __a, RTxY __b) {");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n    /* end of file */");
    gold.append("\n  }");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_NotApplicableToNonLists_9 = null;
  private String get_NotApplicableToNonLists_9() {
    if (cached_NotApplicableToNonLists_9 != null) {
      return cached_NotApplicableToNonLists_9;
    }
    cached_NotApplicableToNonLists_9 = generateTestOutput(false, "NotApplicableToNonLists_9", "./test_code/Linq_NotApplicableToNonLists_failure.a");
    return cached_NotApplicableToNonLists_9;
  }

  @Test
  public void testNotApplicableToNonListsFailure() {
    assertLiveFail(get_NotApplicableToNonLists_9());
  }

  @Test
  public void testNotApplicableToNonListsExceptionFree() {
    assertExceptionFree(get_NotApplicableToNonLists_9());
  }

  @Test
  public void testNotApplicableToNonListsTODOFree() {
    assertTODOFree(get_NotApplicableToNonLists_9());
  }

  @Test
  public void stable_NotApplicableToNonLists_9() {
    String live = get_NotApplicableToNonLists_9();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_NotApplicableToNonLists_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 10");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 2,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: expected an list, but was actually type 'int'.(RuleSetArray)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 3,");
    gold.append("\n      \"character\" : 10");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 3,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: expected an list, but was actually type 'int'.(RuleSetArray)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 4,");
    gold.append("\n      \"character\" : 10");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 4,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: expected an list, but was actually type 'int'.(RuleSetArray)\"");
    gold.append("\n}, {");
    gold.append("\n  \"range\" : {");
    gold.append("\n    \"start\" : {");
    gold.append("\n      \"line\" : 5,");
    gold.append("\n      \"character\" : 10");
    gold.append("\n    },");
    gold.append("\n    \"end\" : {");
    gold.append("\n      \"line\" : 5,");
    gold.append("\n      \"character\" : 11");
    gold.append("\n    }");
    gold.append("\n  },");
    gold.append("\n  \"severity\" : 1,");
    gold.append("\n  \"source\" : \"error\",");
    gold.append("\n  \"message\" : \"Type check failure: expected an list, but was actually type 'int'.(RuleSetArray)\"");
    gold.append("\n} ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class NotApplicableToNonLists_9 extends LivingDocument {");
    gold.append("\n  public NotApplicableToNonLists_9(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 5;");
    gold.append("\n    __track(0);");
    gold.append("\n");
    gold.append("\n    __track(1);");
    gold.append("\n");
    gold.append("\n    __track(2);");
    gold.append("\n");
    gold.append("\n    __track(3);");
    gold.append("\n    int w = 1.skipAndLimit(true, 0, 5);");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<?> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return ;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return ;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(? __obj) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_SortLegacy_10 = null;
  private String get_SortLegacy_10() {
    if (cached_SortLegacy_10 != null) {
      return cached_SortLegacy_10;
    }
    cached_SortLegacy_10 = generateTestOutput(true, "SortLegacy_10", "./test_code/Linq_SortLegacy_success.a");
    return cached_SortLegacy_10;
  }

  @Test
  public void testSortLegacyEmission() {
    assertEmissionGood(get_SortLegacy_10());
  }

  @Test
  public void testSortLegacySuccess() {
    assertLivePass(get_SortLegacy_10());
  }

  @Test
  public void testSortLegacyGoodWillHappy() {
    assertGoodWillHappy(get_SortLegacy_10());
  }

  @Test
  public void testSortLegacyExceptionFree() {
    assertExceptionFree(get_SortLegacy_10());
  }

  @Test
  public void testSortLegacyTODOFree() {
    assertTODOFree(get_SortLegacy_10());
  }

  @Test
  public void stable_SortLegacy_10() {
    String live = get_SortLegacy_10();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_SortLegacy_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class SortLegacy_10 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> tbl;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l1;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l2;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l3;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l4;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l5;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l6;");
    gold.append("\n  private final RxLazy<NtList<RTxX>> l7;");
    gold.append("\n  public SortLegacy_10(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    tbl = RxFactory.makeRxTable(__self, this, __root, \"tbl\", __BRIDGE_X);");
    gold.append("\n    l1 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_i_a)));");
    gold.append("\n    tbl.__subscribe(l1);");
    gold.append("\n    l2 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_s_a)));");
    gold.append("\n    tbl.__subscribe(l2);");
    gold.append("\n    l3 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_b_a)));");
    gold.append("\n    tbl.__subscribe(l3);");
    gold.append("\n    l4 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_d_a)));");
    gold.append("\n    tbl.__subscribe(l4);");
    gold.append("\n    l5 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_mi_a)));");
    gold.append("\n    tbl.__subscribe(l5);");
    gold.append("\n    l6 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_i1_a)));");
    gold.append("\n    tbl.__subscribe(l6);");
    gold.append("\n    l7 = new RxLazy<>(this, NativeBridge.WRAP_LIST(__BRIDGE_X), () -> (tbl.iterate(false).orderBy(true, __ORDER_X_i2_a)));");
    gold.append("\n    tbl.__subscribe(l7);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    tbl.__commit(\"tbl\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    tbl.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxMaybe<RxInt32> i;");
    gold.append("\n    private final RxMaybe<RxString> s;");
    gold.append("\n    private final RxMaybe<RxBoolean> b;");
    gold.append("\n    private final RxMaybe<RxDouble> d;");
    gold.append("\n    private final RxLazy<NtMaybe<Integer>> mi;");
    gold.append("\n    private final RxInt32 i1;");
    gold.append("\n    private final RxLazy<Integer> i2;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      i = RxFactory.makeRxMaybe(this, __node, \"i\", (RxParent __parent) -> RxFactory.makeRxInt32(__parent, __node, \"i\", 0));");
    gold.append("\n      s = RxFactory.makeRxMaybe(this, __node, \"s\", (RxParent __parent) -> RxFactory.makeRxString(__parent, __node, \"s\", \"\"));");
    gold.append("\n      b = RxFactory.makeRxMaybe(this, __node, \"b\", (RxParent __parent) -> RxFactory.makeRxBoolean(__parent, __node, \"b\", false));");
    gold.append("\n      d = RxFactory.makeRxMaybe(this, __node, \"d\", (RxParent __parent) -> RxFactory.makeRxDouble(__parent, __node, \"d\", 0.0));");
    gold.append("\n      mi = new RxLazy<>(this, NativeBridge.WRAP_MAYBE(NativeBridge.INTEGER_NATIVE_SUPPORT), () -> (new NtMaybe<Integer>(123)));");
    gold.append("\n      mi.__subscribe(this);");
    gold.append("\n      i1 = RxFactory.makeRxInt32(this, __node, \"i1\", 123);");
    gold.append("\n      i2 = new RxLazy<>(this, NativeBridge.INTEGER_NATIVE_SUPPORT, () -> (i1.get() + 42));");
    gold.append("\n      i1.__subscribe(i2);");
    gold.append("\n      i2.__subscribe(this);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"i1\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {i1.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        i.__commit(\"i\", __child);");
    gold.append("\n        s.__commit(\"s\", __child);");
    gold.append("\n        b.__commit(\"b\", __child);");
    gold.append("\n        d.__commit(\"d\", __child);");
    gold.append("\n        i1.__commit(\"i1\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        i.__revert();");
    gold.append("\n        s.__revert();");
    gold.append("\n        b.__revert();");
    gold.append("\n        d.__revert();");
    gold.append("\n        i1.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int i;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.i = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"i\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"i\", i, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int i) {");
    gold.append("\n      this.i = i;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_1 implements NtMessageBase {");
    gold.append("\n    private double d;");
    gold.append("\n    private RTx_AnonObjConvert_1(ObjectNode payload) {");
    gold.append("\n      this.d = NativeBridge.DOUBLE_NATIVE_SUPPORT.readFromMessageObject(payload, \"d\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.DOUBLE_NATIVE_SUPPORT.writeTo(\"d\", d, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_1(double d) {");
    gold.append("\n      this.d = d;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_1> __BRIDGE__AnonObjConvert_1 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_1(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_1[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_1[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_2 implements NtMessageBase {");
    gold.append("\n    private boolean b;");
    gold.append("\n    private RTx_AnonObjConvert_2(ObjectNode payload) {");
    gold.append("\n      this.b = NativeBridge.BOOLEAN_NATIVE_SUPPORT.readFromMessageObject(payload, \"b\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.BOOLEAN_NATIVE_SUPPORT.writeTo(\"b\", b, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2(boolean b) {");
    gold.append("\n      this.b = b;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_2> __BRIDGE__AnonObjConvert_2 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_2(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_2[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_3 implements NtMessageBase {");
    gold.append("\n    private String s;");
    gold.append("\n    private RTx_AnonObjConvert_3(ObjectNode payload) {");
    gold.append("\n      this.s = NativeBridge.STRING_NATIVE_SUPPORT.readFromMessageObject(payload, \"s\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.STRING_NATIVE_SUPPORT.writeTo(\"s\", s, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_3(String s) {");
    gold.append("\n      this.s = s;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_3> __BRIDGE__AnonObjConvert_3 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_3 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_3(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_3[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_3[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 13;");
    gold.append("\n    __track(0);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef4 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr6 = new RTx_AnonObjConvert_0(4);");
    gold.append("\n      RTxX _CreateRef5 = _AutoRef4.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef5.i.make().set(_AutoExpr6.i);");
    gold.append("\n    }");
    gold.append("\n    __track(1);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef7 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_1 _AutoExpr9 = new RTx_AnonObjConvert_1(3.14);");
    gold.append("\n      RTxX _CreateRef8 = _AutoRef7.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef8.d.make().set(_AutoExpr9.d);");
    gold.append("\n    }");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef10 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_2 _AutoExpr12 = new RTx_AnonObjConvert_2(true);");
    gold.append("\n      RTxX _CreateRef11 = _AutoRef10.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef11.b.make().set(_AutoExpr12.b);");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef13 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_3 _AutoExpr15 = new RTx_AnonObjConvert_3(\"Hi\");");
    gold.append("\n      RTxX _CreateRef14 = _AutoRef13.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef14.s.make().set(_AutoExpr15.s);");
    gold.append("\n    }");
    gold.append("\n    __track(4);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef16 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr18 = new RTx_AnonObjConvert_0(8);");
    gold.append("\n      RTxX _CreateRef17 = _AutoRef16.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef17.i.make().set(_AutoExpr18.i);");
    gold.append("\n    }");
    gold.append("\n    __track(5);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef19 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_1 _AutoExpr21 = new RTx_AnonObjConvert_1(2.71);");
    gold.append("\n      RTxX _CreateRef20 = _AutoRef19.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef20.d.make().set(_AutoExpr21.d);");
    gold.append("\n    }");
    gold.append("\n    __track(6);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef22 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_2 _AutoExpr24 = new RTx_AnonObjConvert_2(false);");
    gold.append("\n      RTxX _CreateRef23 = _AutoRef22.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef23.b.make().set(_AutoExpr24.b);");
    gold.append("\n    }");
    gold.append("\n    __track(7);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef25 = tbl;");
    gold.append("\n      RTx_AnonObjConvert_3 _AutoExpr27 = new RTx_AnonObjConvert_3(\"Joe\");");
    gold.append("\n      RTxX _CreateRef26 = _AutoRef25.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef26.s.make().set(_AutoExpr27.s);");
    gold.append("\n    }");
    gold.append("\n    __track(8);");
    gold.append("\n    for(RTxX x : l1.get()) {}");
    gold.append("\n    __track(9);");
    gold.append("\n    for(RTxX x : l2.get()) {}");
    gold.append("\n    __track(10);");
    gold.append("\n    for(RTxX x : l3.get()) {}");
    gold.append("\n    __track(11);");
    gold.append("\n    for(RTxX x : l4.get()) {}");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_b_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.b.compareValues(__b.b, (__x, __y) -> __x.compareTo(__y));");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_d_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.d.compareValues(__b.d, (__x, __y) -> __x.compareTo(__y));");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_i1_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.i1.compareTo(__b.i1);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_i2_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.i2.get().compareTo(__b.i2.get());");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_i_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.i.compareValues(__b.i, (__x, __y) -> __x.compareTo(__y));");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_mi_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.mi.get().compareValues(__b.mi.get(), (__x, __y) -> __x.compareTo(__y));");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxX> __ORDER_X_s_a = new Comparator<RTxX>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxX __a, RTxX __b) {");
    gold.append("\n      return __a.s.compareValues(__b.s, (__x, __y) -> __x.compareTo(__y));");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"tbl\":{\"auto_key\":8,\"rows\":{\"0\":{\"i\":4},\"1\":{\"d\":3.14},\"2\":{\"b\":true},\"3\":{\"s\":\"Hi\"},\"4\":{\"i\":8},\"5\":{\"d\":2.71},\"6\":{\"b\":false},\"7\":{\"s\":\"Joe\"}}},\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":21,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"tbl\":{\"auto_key\":8,\"rows\":{\"0\":{\"i\":4},\"1\":{\"d\":3.14},\"2\":{\"b\":true},\"3\":{\"s\":\"Hi\"},\"4\":{\"i\":8},\"5\":{\"d\":2.71},\"6\":{\"b\":false},\"7\":{\"s\":\"Joe\"}}},\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":21,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_WhereBuildClosure_11 = null;
  private String get_WhereBuildClosure_11() {
    if (cached_WhereBuildClosure_11 != null) {
      return cached_WhereBuildClosure_11;
    }
    cached_WhereBuildClosure_11 = generateTestOutput(true, "WhereBuildClosure_11", "./test_code/Linq_WhereBuildClosure_success.a");
    return cached_WhereBuildClosure_11;
  }

  @Test
  public void testWhereBuildClosureEmission() {
    assertEmissionGood(get_WhereBuildClosure_11());
  }

  @Test
  public void testWhereBuildClosureSuccess() {
    assertLivePass(get_WhereBuildClosure_11());
  }

  @Test
  public void testWhereBuildClosureGoodWillHappy() {
    assertGoodWillHappy(get_WhereBuildClosure_11());
  }

  @Test
  public void testWhereBuildClosureExceptionFree() {
    assertExceptionFree(get_WhereBuildClosure_11());
  }

  @Test
  public void testWhereBuildClosureTODOFree() {
    assertTODOFree(get_WhereBuildClosure_11());
  }

  @Test
  public void stable_WhereBuildClosure_11() {
    String live = get_WhereBuildClosure_11();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_WhereBuildClosure_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class WhereBuildClosure_11 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> t;");
    gold.append("\n  public WhereBuildClosure_11(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_X);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_2 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private RTx_AnonObjConvert_2(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2(int x) {");
    gold.append("\n      this.x = x;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_2> __BRIDGE__AnonObjConvert_2 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_2(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_2[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_2[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private NtList<RTxX> __FUNC_0_gotown(int x0) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(0);");
    gold.append("\n    return t.iterate(false).where(true, new __CLOSURE_WhereClause0(x0));");
    gold.append("\n  }");
    gold.append("\n  private NtList<RTxX> __FUNC_1_gotown2(int x0, int x1) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(1);");
    gold.append("\n    return t.iterate(false).where(true, new __CLOSURE_WhereClause1(x0, x1));");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 3;");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef3 = t;");
    gold.append("\n      RTx_AnonObjConvert_2 _AutoExpr5 = new RTx_AnonObjConvert_2(1);");
    gold.append("\n      RTxX _CreateRef4 = _AutoRef3.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef4.x.set(_AutoExpr5.x);");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    NtList<RxInt32> _auto_6 = __FUNC_0_gotown(1).transform((item) -> item.x, null /* no bridge needed */);");
    gold.append("\n    for (RxInt32 _auto_7 : _auto_6) {");
    gold.append("\n      _auto_7.set(2);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxX> {");
    gold.append("\n    private int x0;");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, x0};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause0(int x0) {");
    gold.append("\n      this.x0 = x0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == x0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause1 implements WhereClause<RTxX> {");
    gold.append("\n    private int x0;");
    gold.append("\n    private int x1;");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause1(int x0, int x1) {");
    gold.append("\n      this.x0 = x0;");
    gold.append("\n      this.x1 = x1;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == x0 || x == x1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"t\":{\"auto_key\":1,\"rows\":{\"0\":{\"x\":2}}},\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":7,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"t\":{\"auto_key\":1,\"rows\":{\"0\":{\"x\":2}}},\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":7,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_WhereDuplicateFields_12 = null;
  private String get_WhereDuplicateFields_12() {
    if (cached_WhereDuplicateFields_12 != null) {
      return cached_WhereDuplicateFields_12;
    }
    cached_WhereDuplicateFields_12 = generateTestOutput(true, "WhereDuplicateFields_12", "./test_code/Linq_WhereDuplicateFields_success.a");
    return cached_WhereDuplicateFields_12;
  }

  @Test
  public void testWhereDuplicateFieldsEmission() {
    assertEmissionGood(get_WhereDuplicateFields_12());
  }

  @Test
  public void testWhereDuplicateFieldsSuccess() {
    assertLivePass(get_WhereDuplicateFields_12());
  }

  @Test
  public void testWhereDuplicateFieldsGoodWillHappy() {
    assertGoodWillHappy(get_WhereDuplicateFields_12());
  }

  @Test
  public void testWhereDuplicateFieldsExceptionFree() {
    assertExceptionFree(get_WhereDuplicateFields_12());
  }

  @Test
  public void testWhereDuplicateFieldsTODOFree() {
    assertTODOFree(get_WhereDuplicateFields_12());
  }

  @Test
  public void stable_WhereDuplicateFields_12() {
    String live = get_WhereDuplicateFields_12();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_WhereDuplicateFields_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class WhereDuplicateFields_12 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> t;");
    gold.append("\n  public WhereDuplicateFields_12(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_X);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 x;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      x = RxFactory.makeRxInt32(this, __node, \"x\", 0);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"x\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {x.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        x.__commit(\"x\", __child);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        x.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int x;");
    gold.append("\n    private RTx_AnonObjConvert_0(ObjectNode payload) {");
    gold.append("\n      this.x = NativeBridge.INTEGER_NATIVE_SUPPORT.readFromMessageObject(payload, \"x\");");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public ObjectNode convertToObjectNode() {");
    gold.append("\n      ObjectNode __node = Utility.createObjectNode();");
    gold.append("\n      NativeBridge.INTEGER_NATIVE_SUPPORT.writeTo(\"x\", x, __node);");
    gold.append("\n      return __node;");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(int x) {");
    gold.append("\n      this.x = x;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final MessageBridge<RTx_AnonObjConvert_0> __BRIDGE__AnonObjConvert_0 = new MessageBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0 convert(ObjectNode __node) {");
    gold.append("\n      return new RTx_AnonObjConvert_0(__node);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTx_AnonObjConvert_0[] makeArray(int __n) {");
    gold.append("\n      return new RTx_AnonObjConvert_0[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 3;");
    gold.append("\n    __track(0);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef1 = t;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr3 = new RTx_AnonObjConvert_0(1);");
    gold.append("\n      RTxX _CreateRef2 = _AutoRef1.make();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      _CreateRef2.x.set(_AutoExpr3.x);");
    gold.append("\n    }");
    gold.append("\n    __track(1);");
    gold.append("\n    NtList<RxInt32> _auto_4 = (t.iterate(false).where(true, new __CLOSURE_WhereClause0())).transform((item) -> item.x, null /* no bridge needed */);");
    gold.append("\n    for (RxInt32 _auto_5 : _auto_4) {");
    gold.append("\n      _auto_5.set(0);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int x = __obj.x.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x == 1 || x == 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"t\":{\"auto_key\":1,\"rows\":{\"0\":{\"x\":0}}},\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":5,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"t\":{\"auto_key\":1,\"rows\":{\"0\":{\"x\":0}}},\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":5,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_WherePrimaryKeyExtraction_13 = null;
  private String get_WherePrimaryKeyExtraction_13() {
    if (cached_WherePrimaryKeyExtraction_13 != null) {
      return cached_WherePrimaryKeyExtraction_13;
    }
    cached_WherePrimaryKeyExtraction_13 = generateTestOutput(true, "WherePrimaryKeyExtraction_13", "./test_code/Linq_WherePrimaryKeyExtraction_success.a");
    return cached_WherePrimaryKeyExtraction_13;
  }

  @Test
  public void testWherePrimaryKeyExtractionEmission() {
    assertEmissionGood(get_WherePrimaryKeyExtraction_13());
  }

  @Test
  public void testWherePrimaryKeyExtractionSuccess() {
    assertLivePass(get_WherePrimaryKeyExtraction_13());
  }

  @Test
  public void testWherePrimaryKeyExtractionGoodWillHappy() {
    assertGoodWillHappy(get_WherePrimaryKeyExtraction_13());
  }

  @Test
  public void testWherePrimaryKeyExtractionExceptionFree() {
    assertExceptionFree(get_WherePrimaryKeyExtraction_13());
  }

  @Test
  public void testWherePrimaryKeyExtractionTODOFree() {
    assertTODOFree(get_WherePrimaryKeyExtraction_13());
  }

  @Test
  public void stable_WherePrimaryKeyExtraction_13() {
    String live = get_WherePrimaryKeyExtraction_13();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:.\\test_code\\Linq_WherePrimaryKeyExtraction_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[ ]");
    gold.append("\n--JAVA---------------------------------------------");
    gold.append("\nimport com.fasterxml.jackson.databind.JsonNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ArrayNode;");
    gold.append("\nimport com.fasterxml.jackson.databind.node.ObjectNode;");
    gold.append("\nimport org.adamalang.runtime.*;");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.bridges.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class WherePrimaryKeyExtraction_13 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> t;");
    gold.append("\n  public WherePrimaryKeyExtraction_13(ObjectNode __root, DocumentMonitor __monitor) {");
    gold.append("\n    super(__root, __monitor);");
    gold.append("\n    t = RxFactory.makeRxTable(__self, this, __root, \"t\", __BRIDGE_X);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n    ObjectNode __child = __delta;");
    gold.append("\n    __state.__commit(\"__state\", __child);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __child);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __child);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __child);");
    gold.append("\n    __seq.__commit(\"__seq\", __child);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __child);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __child);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __child);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __child);");
    gold.append("\n    __time.__commit(\"__time\", __child);");
    gold.append("\n    t.__commit(\"t\", __child);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n    if (!(true)) {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n    return __view;");
    gold.append("\n  }");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final RxInt32 z;");
    gold.append("\n    private RTxX(ObjectNode __node, RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      id = RxFactory.makeRxInt32(this, __node, \"id\", 0);");
    gold.append("\n      z = RxFactory.makeRxInt32(this, __node, \"z\", 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public JsonNode getPrivateViewFor(NtClient __who) {");
    gold.append("\n      if (!(true)) {");
    gold.append("\n        return null;");
    gold.append("\n      }");
    gold.append("\n      ObjectNode __view = Utility.createObjectNode();");
    gold.append("\n      return __view;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean __privacyPolicyAllowsCache() {");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    String[] __INDEX_COLUMNS = new String[] {\"z\"};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {z.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, ObjectNode __delta) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        ObjectNode __child = __delta.putObject(__name);");
    gold.append("\n        id.__commit(\"id\", __child);");
    gold.append("\n        z.__commit(\"z\", __child);");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        z.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final RecordBridge<RTxX> __BRIDGE_X = new RecordBridge<>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int  getNumberColumns() {");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX construct(ObjectNode __item, RxParent __parent) {");
    gold.append("\n      return new RTxX(__item, __parent);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public RTxX[] makeArray(int __n) {");
    gold.append("\n      return new RTxX[__n];");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, ObjectNode __message) {");
    gold.append("\n    __code_cost += 13;");
    gold.append("\n    __track(0);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause0());");
    gold.append("\n    __track(1);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause1());");
    gold.append("\n    __track(2);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause2());");
    gold.append("\n    __track(3);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause3());");
    gold.append("\n    __track(4);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause4());");
    gold.append("\n    __track(5);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause5());");
    gold.append("\n    __track(6);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause6());");
    gold.append("\n    __track(7);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause7());");
    gold.append("\n    __track(8);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause8());");
    gold.append("\n    __track(9);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause9());");
    gold.append("\n    __track(10);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause10());");
    gold.append("\n    __track(11);");
    gold.append("\n    (t.iterate(false)).where(true, new __CLOSURE_WhereClause11());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, ObjectNode message) {");
    gold.append("\n    __construct_0(who, message);");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return id == 42;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause1 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return 42 == id;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause2 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return 42 == x.id.get();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause3 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x.id.get() == 42;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause4 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (x.id.get()) == 42;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause5 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return (42);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return x.id.get() == (42);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause6 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (x.id.get() == 42);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause7 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 50};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (x.id.get() == 42 && x.z.get() == 50);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause8 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 50};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX x) {");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (x.z.get() == 50 && x.id.get() == 42);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause9 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 50};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int z = __obj.z.get();");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return z == 50 && id == 42;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause10 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 50};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      int z = __obj.z.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return id == 42 && z == 50 && z == 50 && z == 50 && z == 50;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause11 implements WhereClause<RTxX> {");
    gold.append("\n    @Override");
    gold.append("\n    public int[] getIndices() {");
    gold.append("\n      return new int[] {0, 50};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {}");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return 42;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxX __obj) {");
    gold.append("\n      int z = __obj.z.get();");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return z == 50 && z == 50 && z == 50 && z == 50 && id == 42;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{}}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seedUsed\":\"0\",\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\n{\"command\":\"bill\",\"timestamp\":\"50\"}-->{\"__goodwill_used\":0,\"__cost\":13,\"__billing_seq\":1} need:true in:0");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__seedUsed\":\"0\",\"__seq\":1,\"__time\":\"25\",\"__goodwill_used\":0,\"__cost\":13,\"__billing_seq\":1}");
    gold.append("\n--PRIVACY QUERIES----------------------------------");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\nRANDO was DENIED");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
}
